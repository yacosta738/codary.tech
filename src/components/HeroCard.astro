---
import FormattedDate from "@components/FormattedDate.astro";
import OptimizedCover from "@components/OptimizedPicture.astro";
import type Article from "@models/Article/Article";

interface Props {
	article: Article;
}

const { article } = Astro.props;

function truncateUTF8String(str: string, maxBytes: number) {
	let byteCount = 0;
	let index = 0;
	while (index < str.length && byteCount < maxBytes) {
		const char = str.charCodeAt(index);
		if (char > 0x7ff) {
			byteCount += 3;
		} else if (char > 0x7f) {
			byteCount += 2;
		} else {
			byteCount += 1;
		}
		if (byteCount <= maxBytes) index++;
		else break;
	}
	return str.slice(0, index) + (index < str.length ? "..." : "");
}

const truncatedDescription = truncateUTF8String(article.description, 150);
---

<div
  class="relative overflow-hidden rounded-xl border bg-white transition-transform duration-500 hover:-translate-y-1 hover:scale-105 md:flex md:flex-row dark:border-neutral-600 dark:bg-neutral-900"
>
  <a href={`/posts/${article.id}/`} class="block md:flex md:flex-1">
    <div class="md:w-2/3">
      <OptimizedCover src={article.cover} alt={article.coverAlt} />
    </div>
    <div class="absolute bottom-0 end-0 start-0 bg-gradient-to-t from-zinc-900/10 to-transparent dark:from-black p-4 md:relative md:flex md:w-1/3 md:flex-col md:justify-start md:bg-transparent md:p-5">
    <div class="mt-8 flex items-center gap-4 text-xs text-white md:text-neutral-900 dark:text-white">
        <span>{article.tags.map(tag => tag.title).join(" ")}</span>
        <FormattedDate date={article.pubDate} />
      </div>
      <h3 class="mt-3 text-lg font-bold text-white md:text-neutral-900 dark:text-white">
        {article.title}
      </h3>
      <p class="mt-3 text-white md:text-neutral-900 dark:text-white">
        {truncatedDescription}
      </p>
    </div>
  </a>
</div>
