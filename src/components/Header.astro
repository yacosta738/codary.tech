---
import Link from "@components/Links.astro";
import ThemeToggle from "@components/ThemeToggle.astro";
import { Icon } from "astro-icon/components";
import { HeaderLinks, SITE_TITLE } from "src/site.config";

// Verificar si el usuario está autenticado mediante cookies (solo para SSR inicial)
const accessToken = Astro.cookies.get("sb-access-token")?.value;
const isAuthenticated = !!accessToken;
---

<header class="border-b border-gray-100 dark:border-gray-800 py-4">
  <div class="container mx-auto px-4 flex items-center">
    <div class="md:hidden">
      <button id="mobile-toggle-button" type="button" aria-label="Toggle navigation" class="size-[38px] mr-1 flex justify-center items-center text-sm font-semibold rounded-xl text-black hover:bg-neutral-100 disabled:opacity-50 disabled:pointer-events-none dark:text-white dark:hover:bg-neutral-700">
        <Icon name="tabler:menu" id="menu-icon" class="shrink-0 size-5" />
        <Icon name="tabler:x" id="close-icon" class="shrink-0 size-5 hidden" />
      </button>
    </div>

    <Link class="text-xl font-bold mr-8" href="/" aria-label={SITE_TITLE}>
      {SITE_TITLE}
    </Link>

    <nav class="hidden md:flex items-center space-x-8">
      {HeaderLinks.map((link) => (
        <Link href={link.href || '#'} class="hover:text-gray-600 dark:hover:text-gray-300">
          {link.title}
        </Link>
      ))}
    </nav>

    <div class="flex items-center space-x-4 ml-auto">
      <button type="button" aria-label="Search" class="py-2 px-3 inline-flex items-center gap-x-2 text-sm font-medium rounded-xl border border-transparent text-black hover:bg-neutral-100 dark:text-white dark:hover:bg-neutral-700 transition disabled:opacity-50 disabled:pointer-events-none" onclick="window.location.href='/search/'">
        <Icon name="tabler:search" class="size-5" />
      </button>
      <ThemeToggle />

      <!-- Elemento que se actualiza dinámicamente con JavaScript -->
      <div id="auth-button-container">
        {isAuthenticated ? (
          <a href="/account" class="auth-button account-button bg-[#1E1F23] text-white dark:bg-white dark:text-[#1E1F23] px-4 py-2 rounded-lg font-medium hover:bg-[#25262B] dark:hover:bg-gray-200 transition-colors flex items-center gap-2">
            <Icon name="tabler:user" class="size-5" />
            Mi cuenta
          </a>
        ) : (
          <a href="/signin" class="auth-button signin-button bg-[#1E1F23] text-white dark:bg-white dark:text-[#1E1F23] px-4 py-2 rounded-lg font-medium hover:bg-[#25262B] dark:hover:bg-gray-200 transition-colors">
            Iniciar sesión
          </a>
        )}
      </div>
    </div>
  </div>

  <!-- Mobile menu (hidden by default) -->
  <div id="navbar-collapse" class="hidden md:hidden overflow-hidden transition-all duration-300 basis-full grow md:w-auto md:basis-auto md:order-2 md:col-span-6">
    <nav class="flex flex-col gap-y-4 gap-x-0 mt-5 md:flex-row md:justify-center md:items-center md:gap-y-0 md:gap-x-7 md:mt-0">
      {HeaderLinks.map((link) => (
        <Link href={link.href || '#'} class="hover:text-gray-600 dark:hover:text-gray-300">
          {link.title}
        </Link>
      ))}
    </nav>
  </div>
</header>

<script>
  // Verifica el estado de autenticación analizando las cookies del navegador
  function checkAuthState() {
    // Buscar las cookies de autenticación
    const cookies = document.cookie.split(';');
    let isAuthenticated = false;

    // Comprobar si existe la cookie de token de acceso
    for (const cookie of cookies) {
      const [name, _] = cookie.trim().split('=');
      if (name === 'sb-access-token') {
        isAuthenticated = true;
        break;
      }
    }

    return isAuthenticated;
  }

  // Actualizar el botón de autenticación según el estado
  function updateAuthButton() {
    const isAuthenticated = checkAuthState();
    const container = document.getElementById('auth-button-container');

    if (!container) return;

    if (isAuthenticated) {
      container.innerHTML = `
        <a href="/account" class="auth-button account-button bg-[#1E1F23] text-white dark:bg-white dark:text-[#1E1F23] px-4 py-2 rounded-lg font-medium hover:bg-[#25262B] dark:hover:bg-gray-200 transition-colors flex items-center gap-2">
          <span class="size-5 flex items-center justify-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-user" width="20" height="20" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
              <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
              <path d="M8 7a4 4 0 1 0 8 0a4 4 0 0 0 -8 0"></path>
              <path d="M6 21v-2a4 4 0 0 1 4 -4h4a4 4 0 0 1 4 4v2"></path>
            </svg>
          </span>
          Mi cuenta
        </a>
      `;
    } else {
      container.innerHTML = `
        <a href="/signin" class="auth-button signin-button bg-[#1E1F23] text-white dark:bg-white dark:text-[#1E1F23] px-4 py-2 rounded-lg font-medium hover:bg-[#25262B] dark:hover:bg-gray-200 transition-colors">
          Iniciar sesión
        </a>
      `;
    }
  }

  // Inicializar el botón
  document.addEventListener('DOMContentLoaded', updateAuthButton);

  // Escuchar cambios en las cookies para actualizar la UI
  const cookieDescriptor = Object.getOwnPropertyDescriptor(Document.prototype, 'cookie') || {};
  const originalSetCookie = cookieDescriptor.set;
  Object.defineProperty(document, 'cookie', {
    ...cookieDescriptor,
    set: function(value) {
      if (originalSetCookie) originalSetCookie.call(this, value);
      // Después de cambios en las cookies, verificar estado de autenticación
      setTimeout(updateAuthButton, 100);
    }
  });

  // Verificar periódicamente el estado de autenticación
  setInterval(updateAuthButton, 5000);
</script>

<script is:inline>
  const toggleButton = document.getElementById('mobile-toggle-button');
  const collapseContainer = document.getElementById('navbar-collapse');
  const menuIcon = document.getElementById('menu-icon');
  const closeIcon = document.getElementById('close-icon');

  toggleButton.addEventListener('click', () => {
    collapseContainer.classList.toggle('hidden');
    menuIcon.classList.toggle('hidden');
    closeIcon.classList.toggle('hidden');
  });
</script>
