---
import { type Lang, useTranslations } from "@/i18n";
import { cn } from "@/lib/utils";
import SubscriptionForm from "./SubscriptionForm.astro";
const t = useTranslations(Astro.currentLocale as Lang);

// Check if user is logged in
let isLoggedIn = false;
try {
	const response = await fetch(`${Astro.url.origin}/api/user`, {
		headers: {
			cookie: Astro.request.headers.get("cookie") || "",
		},
	});
	const data = await response.json();
	isLoggedIn = data.isLoggedIn;
} catch (error) {
	console.error("Error fetching user:", error);
}
---

<section class={
cn(
  "flex justify-center items-center w-full will-change-transform hero-section colored-hero"
)
} id="hero">
  <div class={cn(
    "flex items-center justify-center bg-hero-bg-light dark:bg-hero-bg-dark pt-[180px] pb-[100px] px-0",
    "transition-colors duration-[350ms] ease-in-out w-full"
  )}>
        <div class="flex gap-28 mx-auto max-w-7xl w-full">
            <div class="flex flex-col items-center container mx-auto px-4 w-full max-w-4xl">
                <h1 class={cn(
                  "text-white text-5xl md:text-7xl font-bold leading-tight tracking-tight relative",
                  "transition-colors duration-350 animate-fadeIn font-heading text-center"
                )}>
                    {t("hero.title")}
                </h1>
                <p class={cn(
                  "text-white relative mt-5 max-w-xl text-xl font-medium tracking-wide leading-relaxed",
                  "animate-fadeIn animation-delay-150"
                )}>
                    {t("hero.description")}
                </p>
                {!isLoggedIn && (
                  <div class="flex justify-center items-center mt-6 w-full">
                      <SubscriptionForm formId="hero-subscription-form" formType="subscribe" />
                  </div>
                )}
            </div>
        </div>
    </div>
</section>

<script>
  // Check authentication status on the client side to handle dynamic changes
  document.addEventListener('DOMContentLoaded', async () => {
    try {
      const response = await fetch('/api/user');
      const data = await response.json();

      const subscriptionFormContainer = document.querySelector('#hero .flex.justify-center.items-center.mt-6');

      // If user is logged in and the form container is visible, hide it
      if (data.isLoggedIn && subscriptionFormContainer) {
        subscriptionFormContainer.classList.add('hidden');
      }
    } catch (error) {
      console.error('Error checking auth status:', error);
    }
  });
</script>
