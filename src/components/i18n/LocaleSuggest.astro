---
// Displays a link to the user's system language page
// if the language being viewed is different

import { LOCALES, type Lang, useTranslations } from "@/i18n";
import { cn } from "@/lib/utils";
import { Icon } from "astro-icon/components";
import type { HTMLAttributes } from "astro/types";
interface Props extends HTMLAttributes<"div"> {
	position?: "bottom-left" | "bottom-right" | "top-left" | "top-right";
}

const { position = "bottom-left", ...attr } = Astro.props;
const currentLocale = Astro.currentLocale as Lang;

// Prepare translations for all languages for client-side use
const allTranslations = Object.fromEntries(
	Object.keys(LOCALES).map((lang) => {
		const t = useTranslations(lang as Lang);
		return [
			lang,
			{
				suggestion: t("language.suggestion"),
				close: t("close"),
			},
		];
	}),
);

// Generate position classes based on the selected position
const getPositionClasses = () => {
	switch (position) {
		case "bottom-left":
			return "bottom-4 left-4 translate-x-0";
		case "bottom-right":
			return "bottom-4 right-4 translate-x-0";
		case "top-left":
			return "top-4 left-4 translate-x-0";
		case "top-right":
			return "top-4 right-4 translate-x-0";
		default:
			return "bottom-4 left-4 translate-x-0";
	}
};

const positionClasses = getPositionClasses();
---

<div id="js-languageSuggest" class={cn("fixed hidden z-50 opacity-0 transition-all duration-300 ease-in-out", positionClasses, attr.class)}>
  <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 flex items-center px-4 py-3 gap-3 w-auto max-w-md">
    <div class="flex-shrink-0">
      <Icon name="tabler:language" class="size-5 text-blue-500 dark:text-blue-400" />
    </div>

    <div class="flex-grow">
      <p class="text-sm text-gray-700 dark:text-gray-300">
        <span class="font-medium" id="js-suggestionText"></span>
        <a id="js-link" href="#" class="text-blue-600 dark:text-blue-400 hover:underline font-medium">
          <span id="js-linkText"></span>
        </a>
      </p>
    </div>

    <button id="js-close" class="flex-shrink-0 p-1 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors duration-200 ease-in-out" aria-label="Close">
      <Icon name="tabler:x" class="size-4 text-gray-500 dark:text-gray-400" />
      <span class="sr-only" id="js-closeText"></span>
    </button>
  </div>
</div>

<script is:inline define:vars={{ currentLocale, LOCALES, position, allTranslations }}>
  const browserLang = navigator.language.toLowerCase();
  const suggest = document.getElementById("js-languageSuggest");

  // Get the best matching translation based on browser language
  function getBrowserTranslations() {
    // Try exact match first
    if (allTranslations[browserLang]) {
      return allTranslations[browserLang];
    }

    // Try base language match (e.g., "en" from "en-US")
    const baseLang = browserLang.split("-")[0];
    if (allTranslations[baseLang]) {
      return allTranslations[baseLang];
    }

    // Fallback to currentLocale if no match
    return allTranslations[currentLocale] || allTranslations["en"];
  }

  const translations = getBrowserTranslations();

  // Set UI texts based on browser language
  document.getElementById("js-suggestionText").innerText = translations.suggestion + ": ";
  document.getElementById("js-closeText").innerText = translations.close;

  const showSuggest = (lang) => {
    const pathnames = location.pathname.split("/");
    const link = document.getElementById("js-link");
    const linkText = document.getElementById("js-linkText");

    pathnames[1] = lang;
    link.href = pathnames.join("/");
    linkText.innerText = LOCALES[lang].label;

    // Show with animation
    suggest.style.display = "block";
    setTimeout(() => {
      suggest.style.opacity = "1";

      // No transform needed when using fixed positioning at corners
      if (position.includes("left") || position.includes("right")) {
        suggest.style.transform = "translateY(0)";
      }
    }, 100);
  };

  if (
    currentLocale === browserLang ||
    currentLocale === browserLang.split("-")[0] ||
    localStorage.languageSuggestDenied ||
    localStorage.selectedLang
  ) {
    return;
  } else if (Object.keys(LOCALES).includes(browserLang)) {
    showSuggest(browserLang);
  } else if (Object.keys(LOCALES).includes(browserLang.split("-")[0])) {
    showSuggest(browserLang.split("-")[0]);
  }

  document.getElementById("js-close").addEventListener("click", () => {
    // Hide with animation
    suggest.style.opacity = "0";
    setTimeout(() => {
      suggest.style.display = "none";
    }, 300);
    localStorage.languageSuggestDenied = true;
  });
</script>
