---
import { type Lang, useTranslations } from "@/i18n";
import { cn } from "@/lib/utils";
import { Icon } from "astro-icon/components";
import Button from "./Button.astro";
import Input from "./Input.astro";
import Link from "./Link.astro";

interface Props {
	formClass?: string;
	inputClass?: string;
	inputContainerClass?: string;
	successMessageClass?: string;
	formId?: string;
	buttonText?: string;
	buttonClass?: string;
}

const {
	formClass = "relative flex flex-col items-center w-full",
	inputClass,
	inputContainerClass = "w-full max-w-md gap-1.5",
	successMessageClass = "text-white",
	formId = "signup-form",
	buttonText,
	buttonClass,
} = Astro.props;

const t = useTranslations(Astro.currentLocale as Lang);
const finalButtonText = buttonText || t("signup.submit");
---

<form id={formId} class={cn(formClass)} data-members-form="signup" data-members-autoredirect="false" novalidate="">
    <div class={cn("flex flex-col justify-center items-center", inputContainerClass)}>
        <Input
            class={cn(inputClass, "mb-4")}
            type="text"
            name="name-input"
            id="name-input"
            placeholder={t("signup.name_placeholder") || "Enter your name"}
            aria-label={t("signup.name_placeholder") || "Enter your name"}
            required />

        <Input
            class={cn(inputClass)}
            type="email"
            name="email-input"
            id="email-input"
            placeholder={t("email.placeholder")}
            aria-label={t("email.placeholder")}
            required />

        <Button type="submit" aria-label="Sign Up button" class={cn("mt-4", buttonClass)}>
            {finalButtonText}
            <span>
                <Icon name="tabler:chevron-right" class="size-5" />
            </span>
            <span class="hidden" id="signup-loader">
                <Icon name="tabler:loader" class="size-5 animate-spin" />
            </span>
        </Button>
    </div>
    <p class={cn(
      "hidden font-sans text-xs font-medium leading-normal tracking-wide text-red-600",
      "absolute top-[calc(100%+4px)] left-0 signup-form-error-class"
    )} data-members-error=""></p>
    <div class={cn(
      "hidden flex-col items-center signup-form-success-class",
      successMessageClass
    )}>
        <div class="flex items-center gap-2.5 mt-2.5">
            <Icon name="tabler:circle-check-filled" class="size-10" />
            <p class="font-heading text-2xl font-bold leading-tight tracking-tight">
                {t("signup.success.title") || "Registration successful!"}
            </p>
        </div>
        <p class="font-sans text-lg font-medium leading-normal tracking-wide mt-2 mb-4 max-w-[75%] text-center">
            {t("signup.success.text") || "Please check your email for a verification link to complete your registration."}
        </p>

        <Link href="/" aria-label="Home Page Link">
            {t("signup.success.button") || "Back to home"}
            <Icon name="tabler:chevron-right" class="size-5" />
        </Link>
    </div>
</form>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const forms = document.querySelectorAll('[data-members-form="signup"]');

    forms.forEach(form => {
      const errorMessage = form.querySelector('.signup-form-error-class');
      const successMessage = form.querySelector('.signup-form-success-class');
      const formInputs = form.querySelector('.flex.flex-col.justify-center.items-center');
      const submitLoader = form.querySelector('#signup-loader');
      const submitButton = form.querySelector('button[type="submit"]');

      form.addEventListener('submit', async (e) => {
        e.preventDefault();

        // Hide any existing error message
        if (errorMessage) {
          errorMessage.textContent = '';
          errorMessage.classList.add('hidden');
        }

        // Show loading state
        if (submitLoader && submitButton) {
          submitLoader.classList.remove('hidden');
          const submitButtonText = submitButton.querySelector(':first-child');
          if (submitButtonText) {
            submitButtonText.classList.add('hidden');
          }
        }

        const nameInput = form.querySelector('input[type="text"]') as HTMLInputElement;
        const emailInput = form.querySelector('input[type="email"]') as HTMLInputElement;
        const name = nameInput?.value || '';
        const email = emailInput?.value || '';

        if (!name) {
          showError('Name is required');
          return;
        }

        if (!email) {
          showError('Email is required');
          return;
        }

        try {
          const response = await fetch('/api/auth/signup', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ name, email }),
          });

          const data = await response.json();

          if (data.success) {
            // Hide form inputs and show success message
            if (formInputs && successMessage) {
              formInputs.classList.add('hidden');
              successMessage.classList.remove('hidden');
              successMessage.classList.add('flex');
            }
          } else {
            // Show error message
            showError(data.message || 'An error occurred during signup');
          }
        } catch (error) {
          console.error('Error:', error);
          showError('An error occurred. Please try again.');
        }
      });

      function showError(message: string) {
        if (errorMessage) {
          errorMessage.textContent = message;
          errorMessage.classList.remove('hidden');
        }

        resetButtonState();
      }

      function resetButtonState() {
        if (submitLoader && submitButton) {
          submitLoader.classList.add('hidden');
          const submitButtonText = submitButton.querySelector(':first-child');
          if (submitButtonText) {
            submitButtonText.classList.remove('hidden');
          }
        }
      }
    });
  });
</script>
