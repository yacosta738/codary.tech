---
import { ACCESS_TOKEN } from "@configs";
import { BRAND_NAME } from "@configs";
import { Icon } from "astro-icon/components";

// Verificar si el usuario está autenticado mediante cookies (solo para SSR inicial)
const accessToken = Astro.cookies.get(ACCESS_TOKEN)?.value;
const isAuthenticated = !!accessToken;
---

  <section class="py-20 text-center bg-white dark:bg-zinc-900">
    <div class="container mx-auto px-4">
      <h1 class="text-7xl font-bold mb-6 text-zinc-900 dark:text-white">Esta Semana en {BRAND_NAME}</h1>
      <p class="text-xl text-zinc-600 dark:text-zinc-400 mb-8 max-w-2xl mx-auto">
        Únete a miles de lectores que descubren las últimas novedades en software y contenido {BRAND_NAME} cada viernes
      </p>
      {!isAuthenticated && (
      <form id="newsletter-form" class="max-w-md mx-auto">
        <div class="flex gap-2">
          <input
            type="email"
            id="email"
            name="email"
            placeholder="Ingresa tu correo electrónico"
            required
            class="flex-1 px-4 py-2 rounded bg-zinc-50 dark:bg-zinc-800 border border-zinc-200 dark:border-zinc-700 focus:outline-none focus:border-zinc-400 dark:focus:border-zinc-500 transition-colors text-zinc-900 dark:text-white placeholder-zinc-500 dark:placeholder-zinc-400"
          />
          <button
            type="submit"
            class="bg-zinc-900 dark:bg-white text-white dark:text-zinc-900 px-4 py-2 rounded font-medium hover:bg-zinc-800 dark:hover:bg-zinc-100 transition-colors relative flex items-center gap-2"
          >
            <span class="uppercase">Suscribirse</span>
            <Icon name="tabler:chevron-right" class="size-5" />
          </button>
        </div>
        <p id="form-message" class="hidden mt-2 px-1 text-left text-sm text-zinc-700 dark:text-zinc-300"></p>
      </form>
      )}
    </div>
  </section>

<style>
.loading {
  opacity: 0.7;
  cursor: not-allowed;
  position: relative;
}

.loading::after {
  content: "";
  width: 16px;
  height: 16px;
  border: 2px solid white;
  border-top-color: transparent;
  border-radius: 50%;
  position: absolute;
  right: 12px;
  top: 50%;
  transform: translateY(-50%);
  animation: spin 0.8s linear infinite;
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}
</style>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const form = document.getElementById("newsletter-form") as HTMLFormElement;
  const emailInput = document.getElementById("email") as HTMLInputElement;
  const submitButton = form?.querySelector("button[type='submit']") as HTMLButtonElement;
  const formMessage = document.getElementById("form-message");

  if (!form || !emailInput || !submitButton || !formMessage) return;

  const toggleLoading = (isLoading: boolean): void => {
    submitButton.disabled = isLoading;
    emailInput.disabled = isLoading;
    submitButton.classList.toggle("loading", isLoading);
  };

  const showMessage = (message: string, isError = false): void => {
    formMessage.textContent = message;
    formMessage.classList.remove("hidden", "text-green-600", "text-red-600");
    formMessage.classList.add(isError ? "text-red-600" : "text-green-600");

    setTimeout(() => formMessage.classList.add("hidden"), 5000);
  };

  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    const email = emailInput.value.trim();

    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
      showMessage("Por favor, ingresa un correo válido", true);
      return;
    }

    toggleLoading(true);

    try {
      const response = await fetch("/api/newsletter/subscribe", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email }),
      });

      const data = await response.json();
      if (!response.ok) throw new Error(data.error || "Error al suscribirse");

      showMessage("¡Te has suscrito correctamente!");
      form.reset();
    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : "Error al suscribirse";
      showMessage(errorMessage, true);
    } finally {
      toggleLoading(false);
    }
  });
});
</script>
