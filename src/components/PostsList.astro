---
import { type Lang, useTranslations } from "@/i18n";
import type Post from "@/models/post/post.model";
import { getPostType } from "@/models/post/post.service";
import Button from "./Button.astro";
import PostCard from "./PostCard.astro";

interface Props {
	posts: Post[];
	title?: string;
	showLoadMore?: boolean;
	postsPerPage?: number;
	orderBy?: "newest" | "oldest" | "alphabetical";
}

const {
	posts,
	title,
	showLoadMore = true,
	postsPerPage = 6,
	orderBy = "newest",
} = Astro.props;

const currentLocale = Astro.currentLocale as Lang;
const t = useTranslations(currentLocale);
const hasPosts = posts.length > 0;
const hasMorePosts = posts.length > postsPerPage;

// Order posts based on the orderBy property
const orderedPosts = [...posts];
switch (orderBy) {
	case "newest":
		// Assuming posts have a date or createdAt property
		orderedPosts.sort(
			(a, b) => new Date(b.date).getTime() - new Date(a.date).getTime(),
		);
		break;
	case "oldest":
		orderedPosts.sort(
			(a, b) => new Date(a.date).getTime() - new Date(b.date).getTime(),
		);
		break;
	case "alphabetical":
		orderedPosts.sort((a, b) => a.title.localeCompare(b.title));
		break;
}
---

<div>
  {title && (
    <h2 class="mx-auto py-10 font-inter text-secondary-foreground-light dark:text-secondary-foreground-dark text-[14px] font-semibold capitalize mb-8 leading-5 tracking-tight">
      {title}
    </h2>
  )}

  {hasPosts ? (
    <div id="posts-container" class="grid grid-cols-1 md:grid-cols-2 gap-12 md:gap-10 overflow-hidden">
      {orderedPosts.map((post, index) => (
        <div class={index >= postsPerPage ? "hidden-post" : ""}>
          <PostCard
            {...post}
            type={getPostType(post)}
            animationDelay={index < postsPerPage ? index : 0}
          />
        </div>
      ))}
    </div>
  ) : (
    <div class="text-center py-16">
      <p class="text-secondary-foreground-light dark:text-secondary-foreground-dark text-lg">
        {t("no.posts.available")}
      </p>
    </div>
  )}

  {hasPosts && showLoadMore && hasMorePosts && (
    <div id="load-more-container" class="flex justify-center mt-12">
      <Button
        id="load-more-button"
        aria-label={t("load.more")}
        tabindex="0"
        class="text-sm font-semibold">
        {t("load.more")}
      </Button>
    </div>
  )}
</div>

<script>
  // Client-side JavaScript to handle the load more functionality
  document.addEventListener('DOMContentLoaded', () => {
    const loadMoreButton = document.getElementById('load-more-button');
    const loadMoreContainer = document.getElementById('load-more-container');
    const hiddenPosts = Array.from(document.querySelectorAll('.hidden-post'));
    const postsPerBatch = 6;

    if (loadMoreButton && hiddenPosts.length > 0) {
      loadMoreButton.addEventListener('click', () => {
        // Calculate how many more posts to show
        const postsToShow = hiddenPosts.slice(0, postsPerBatch);

        if (postsToShow.length > 0) {
          // Show the next batch of posts with staggered animation
          postsToShow.forEach((postContainer, index) => {
            postContainer.classList.remove('hidden-post');

            // Set animation delay for each newly visible post
            const article = postContainer.querySelector('article');
            if (article) {
              article.classList.add('post-card-animation');
              article.style.setProperty('--i', index.toString());
            }

            // Remove from hidden posts array
            hiddenPosts.splice(0, 1);
          });

          // Hide the button if no more posts to load
          if (hiddenPosts.length === 0 && loadMoreContainer) {
            loadMoreContainer.style.display = 'none';
          }
        }
      });
    }
  });
</script>

<style>
  /* Hide posts that should not be initially visible */
  .hidden-post {
    display: none;
  }
</style>
