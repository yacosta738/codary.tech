---
import { type Lang, useTranslations } from "@/i18n";
import { cn } from "@/lib/utils";
import { Icon } from "astro-icon/components";
import type { HTMLAttributes } from "astro/types";
import Button from "./Button.astro";
import Input from "./Input.astro";
import Link from "./Link.astro";

interface Props extends HTMLAttributes<"form"> {
	inputClass?: string;
	inputContainerClass?: string;
	successMessageClass?: string;
	formId?: string;
	buttonText?: string;
	buttonClass?: string;
	formType?: "subscribe" | "login"; // New prop to determine form behavior
}

const {
	inputClass,
	inputContainerClass = "w-full max-w-md gap-1.5",
	successMessageClass = "text-white",
	formId = "subscription-form",
	buttonText,
	buttonClass,
	formType = "subscribe", // Default to subscribe behavior
	...attrs
} = Astro.props;

const t = useTranslations(Astro.currentLocale as Lang);
const finalButtonText =
	buttonText ||
	(formType === "login" ? t("signin.submit") : t("cta.subscribe"));

// Different success messages based on form type
const successTitle =
	formType === "login" ? t("signin.success.title") : t("email.success.title");
const successText =
	formType === "login" ? t("signin.success.text") : t("email.success.text");
const successButtonText =
	formType === "login" ? t("signin.success.button") : t("email.success.button");
---

<form
	id={formId}
	class={cn("relative flex flex-col items-center w-full", attrs.class)}
	data-members-form="subscribe"
	data-form-type={formType}
	{...attrs}
>
	<div class={cn("flex justify-center items-center", inputContainerClass)}>
		<Input
			class={cn(inputClass)}
			type="email"
			name="email-input"
			id="email-input"
			placeholder={t("email.placeholder")}
			aria-label={t("email.placeholder")}
			required
		/>

		<Button
			type="submit"
			aria-label={formType === "login" ? "Sign In button" : "Subscribe button"}
			class={cn(buttonClass)}
		>
			{finalButtonText}
			<span>
				<Icon name="tabler:chevron-right" class="size-5" />
			</span>
			<span class="hidden" id="subscribe-loader">
				<Icon name="tabler:loader" class="size-5 animate-spin" />
			</span>
		</Button>
	</div>
	<p
		class={cn(
			"hidden font-sans text-xs font-medium leading-normal tracking-wide text-red-600",
			"absolute top-[calc(100%+4px)] left-0 subscribe-form-error-class"
		)}
		data-members-error=""
	>
	</p>
	<div
		class={cn(
			"hidden flex-col items-center subscribe-form-success-class",
			successMessageClass
		)}
	>
		<div class="flex items-center gap-2.5 mt-2.5">
			<Icon name="tabler:circle-check-filled" class="size-10" />
			<p class="font-heading text-2xl font-bold leading-tight tracking-tight">
				{successTitle}
			</p>
		</div>
		<p
			class="font-sans text-lg font-medium leading-normal tracking-wide mt-2 mb-4 max-w-[75%] text-center"
		>
			{successText}
		</p>

		<Link href="/" aria-label="Home Page Link">
			{successButtonText}
			<Icon name="tabler:chevron-right" class="size-5" />
		</Link>
	</div>
</form>

<script>
	document.addEventListener("DOMContentLoaded", () => {
		const forms = document.querySelectorAll('[data-members-form="subscribe"]');

		forms.forEach((form) => {
			const errorMessage = form.querySelector("[data-members-error]");
			const successMessage = form.querySelector(
				".subscribe-form-success-class"
			);
			const formInputs = form.querySelector(
				".flex.justify-center.items-center"
			);
			const submitLoader = form.querySelector("#subscribe-loader");
			const submitButton = form.querySelector('button[type="submit"]');

			// Get form type to determine which API endpoint to use
			const formType = form.getAttribute("data-form-type") || "subscribe";
			const endpoint =
				formType === "login" ? "/api/auth/signin" : "/api/newsletter/subscribe";

			form.addEventListener("submit", async (e) => {
				e.preventDefault();

				// Hide any existing error message
				if (errorMessage) {
					errorMessage.textContent = "";
					errorMessage.classList.add("hidden");
				}

				// Show loading state
				if (submitLoader && submitButton) {
					submitLoader.classList.remove("hidden");
					const submitButtonText = submitButton.querySelector(":first-child");
					if (submitButtonText) {
						submitButtonText.classList.add("hidden");
					}
				}

				const emailInput = form.querySelector(
					'input[type="email"]'
				) as HTMLInputElement;
				const email = emailInput?.value;

				try {
					const response = await fetch(endpoint, {
						method: "POST",
						headers: {
							"Content-Type": "application/json",
						},
						body: JSON.stringify({ email }),
					});

					const data = await response.json();

					if (data.success) {
						// Hide form inputs and show success message
						if (formInputs && successMessage) {
							formInputs.classList.add("hidden");
							successMessage.classList.remove("hidden");
							successMessage.classList.add("flex");
						}
					} else {
						// Show error message
						if (errorMessage) {
							errorMessage.textContent = data.message;
							errorMessage.classList.remove("hidden");
						}

						// Reset button state
						resetButtonState();
					}
				} catch (error) {
					console.error("Error:", error);

					// Show generic error message
					if (errorMessage) {
						errorMessage.textContent = "An error occurred. Please try again.";
						errorMessage.classList.remove("hidden");
					}

					resetButtonState();
				}
			});

			function resetButtonState() {
				if (submitLoader && submitButton) {
					submitLoader.classList.add("hidden");
					const submitButtonText = submitButton.querySelector(":first-child");
					if (submitButtonText) {
						submitButtonText.classList.remove("hidden");
					}
				}
			}
		});
	});
</script>
