---
export const prerender = true;
import PageHeadline from "@/components/PageHeadline.astro";
import PostsList from "@/components/PostsList.astro";
import { LOCALES, type Lang, useTranslations } from "@/i18n";
import Layout from "@/layouts/General.astro";
import { getNewsletters } from "@/models/newsletter";
import type Tag from "@/models/tag/tag.model";
import { getTagById } from "@/models/tag/tag.service";
import { cleanEntityId } from "@/utils/collection.entity";

export async function getStaticPaths() {
	const publishedNewsletters = await getNewsletters({ includeDrafts: false });

	// Create paths for each language and tag
	const paths = [];

	// Collect all unique tag IDs from articles
	const uniqueTagIds = new Set<string>();
	for (const newsletter of publishedNewsletters) {
		if (newsletter.tags && Array.isArray(newsletter.tags)) {
			for (const tag of newsletter.tags) {
				// Handle both string tags and tag objects
				const tagId = typeof tag === "string" ? tag : tag.id;
				uniqueTagIds.add(tagId);
			}
		}
	}

	// Generate paths for all supported languages and tags
	for (const lang of Object.keys(LOCALES)) {
		for (const tagId of uniqueTagIds) {
			// Only process tags for the current language
			if (!tagId.startsWith(`${lang}/`)) continue;

			// Try to get tag data from the tag service
			let tagObject: Tag;
			try {
				const resolvedTag = await getTagById(tagId);
				if (!resolvedTag) {
					// Create a basic tag object if not found in the collection
					tagObject = { id: tagId, title: tagId.split("/").pop() || tagId };
					console.log(`⚠️ Created fallback tag object for: ${tagId}`);
				} else {
					tagObject = resolvedTag;
				}
			} catch (error) {
				console.error(`❌ Error getting tag ${tagId}:`, error);
				// Create a fallback tag to prevent build failure
				tagObject = { id: tagId, title: tagId.split("/").pop() || tagId };
			}

			// Filter newsletter for this language and tag
			const newslettersByTag = publishedNewsletters
				.filter((newsletter) => {
					if (newsletter.id.split("/")[0] !== lang) return false;
					if (!newsletter.tags || !Array.isArray(newsletter.tags)) return false;

					return newsletter.tags.some((currentTag) => {
						const newsletterTagId =
							typeof currentTag === "string" ? currentTag : currentTag.id;
						return newsletterTagId === tagId;
					});
				})
				.sort(
					(a, b) => new Date(b.date).valueOf() - new Date(a.date).valueOf(),
				);

			// Skip if no posts for this tag
			if (newslettersByTag.length === 0) {
				console.log(`ℹ️ No newsletters found for tag: ${tagId}`);
				continue;
			}

			paths.push({
				params: {
					lang,
					tag: cleanEntityId(tagId),
				},
				props: {
					newsletters: newslettersByTag,
					tag: tagObject,
				},
			});
		}
	}
	return paths;
}

// Get current locale and tag from params for rendering
const { lang, tag } = Astro.params;
const currentLocale = lang as Lang;
const t = useTranslations(currentLocale);

const title = t({
	en: `Newsletters tagged with "${tag}"`,
	es: `Newsletters etiquetados con "${tag}"`,
});

const { newsletters } = Astro.props;
---

<Layout title={title}>
	<div class="container mx-auto px-4 pt-24">
		<PageHeadline title={title}>
			<p class="text-xl text-main-light dark:text-main-dark">
				{
					t({
						en: `Browse all our newsletters related to ${tag}`,
						es: `Navega por todos nuestros newsletters relacionados con ${tag}`,
					})
				}
			</p>
		</PageHeadline>

		<PostsList
			posts={newsletters}
			title={title}
			showLoadMore={true}
		/>
	</div>
</Layout>
