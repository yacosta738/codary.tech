---
import { type Lang, useTranslations } from "@/i18n";
import Layout from "@/layouts/Base.astro";
import { supabase } from "@/lib/supabase";
import { cn } from "@/lib/utils";
import { Icon } from "astro-icon/components";

const t = useTranslations(Astro.currentLocale as Lang);

// Check if user is logged in
let user = null;
let error = null;
let updateResult = null;

try {
	const {
		data: { session },
	} = await supabase.auth.getSession();

	if (!session) {
		return Astro.redirect(`/${Astro.currentLocale}/signin`);
	}

	user = session.user;

	// Handle form submission for profile update
	if (Astro.request.method === "POST") {
		try {
			const formData = await Astro.request.formData();
			const name = formData.get("name") as string;

			// Process avatar if provided
			let avatarUrl = user.user_metadata?.avatar_url;
			const avatarFile = formData.get("avatar") as File;

			if (avatarFile && avatarFile.size > 0) {
				// Upload avatar to Supabase Storage
				const fileExt = avatarFile.name.split(".").pop();
				const fileName = `${user.id}-${Date.now()}.${fileExt}`;

				const { error: uploadError } = await supabase.storage
					.from("avatars")
					.upload(fileName, avatarFile, { upsert: true });

				if (uploadError) {
					throw new Error(uploadError.message);
				}

				// Get public URL
				const {
					data: { publicUrl },
				} = supabase.storage.from("avatars").getPublicUrl(fileName);

				avatarUrl = publicUrl;
			}

			// Update user metadata
			const { data: updatedUser, error: updateError } =
				await supabase.auth.updateUser({
					data: {
						name: name,
						avatar_url: avatarUrl,
					},
				});

			if (updateError) {
				throw new Error(updateError.message);
			}

			user = updatedUser.user;
			updateResult = { success: true };
		} catch (e: unknown) {
			const errorMessage =
				e instanceof Error ? e.message : "Error updating profile";
			updateResult = { success: false, error: errorMessage };
		}
	}
} catch (e) {
	error = e instanceof Error ? e.message : "Authentication error";
	return Astro.redirect(`/${Astro.currentLocale}/signin`);
}

// Function to generate Gravatar URL
function getGravatarUrl(email: string) {
	const md5 = (str: string) => {
		// This is a simplified mock of MD5 for demo purposes
		// In a real app, use a proper MD5 implementation
		return Array.from(new TextEncoder().encode(str))
			.map((b) => b.toString(16).padStart(2, "0"))
			.join("");
	};

	const hash = md5(email.toLowerCase().trim());
	return `https://www.gravatar.com/avatar/${hash}?d=mp&s=200`;
}

// Determine avatar URL
const avatarUrl =
	user?.user_metadata?.avatar_url ||
	(user?.email ? getGravatarUrl(user.email) : null);

// Determine display name
const displayName =
	user?.user_metadata?.name || user?.email?.split("@")[0] || "";
---

<Layout title={t('account.title') || "My Account"} description={t('account.description') || "Manage your account settings"}>
  <div class="max-w-4xl">
    <div class="flex items-center justify-between mb-8">
      <h1 class="text-3xl font-bold text-main-light dark:text-main-dark">
        {t('account.title') || "My Account"}
      </h1>
      <form action="/api/auth/signout" method="get">
        <button type="submit" class="flex items-center gap-2 text-red-500 hover:text-red-600 dark:text-red-400 dark:hover:text-red-300">
          <Icon name="tabler:logout" class="size-5" />
          {t('account.signout') || "Sign Out"}
        </button>
      </form>
    </div>

    {error && (
      <div class="notification bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-6 dark:bg-red-900/30 dark:border-red-800 dark:text-red-400 flex justify-between transition-opacity duration-300">
        <p class="flex items-center gap-2">
          <Icon name="tabler:alert-circle" class="size-5" />
          {error}
        </p>
        <button class="notification-close" aria-label="Close">
          <Icon name="tabler:x" class="size-5" />
        </button>
      </div>
    )}

    {updateResult?.success && (
      <div class="notification bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-lg mb-6 dark:bg-green-900/30 dark:border-green-800 dark:text-green-400 flex justify-between transition-opacity duration-300">
        <p class="flex items-center gap-2">
          <Icon name="tabler:square-rounded-check" class="size-5" />
          {t('account.updated') || "Profile updated successfully"}
        </p>
        <button class="notification-close" aria-label="Close">
          <Icon name="tabler:x" class="size-5" />
        </button>
      </div>
    )}

    {updateResult?.error && (
      <div class="notification bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-6 dark:bg-red-900/30 dark:border-red-800 dark:text-red-400 flex justify-between transition-opacity duration-300">
        <p class="flex items-center gap-2">
          <Icon name="tabler:alert-circle" class="size-5" />
          {updateResult.error}
        </p>
        <button class="notification-close" aria-label="Close">
          <Icon name="tabler:x" class="size-5" />
        </button>
      </div>
    )}

    <div class="grid md:grid-cols-3 gap-8">
      <!-- Sidebar menu -->
      <aside class="space-y-2">
        <button class="w-full text-left px-4 py-2 rounded-lg bg-square-light dark:bg-square-dark font-medium flex items-center gap-2">
          <Icon name="tabler:user" class="size-5" />
          {t('account.profile') || "Profile"}
        </button>
        <button class="w-full text-left px-4 py-2 rounded-lg hover:bg-square-light dark:hover:bg-square-dark flex items-center gap-2">
          <Icon name="tabler:settings" class="size-5" />
          {t('account.settings') || "Settings"}
        </button>
        <button class="w-full text-left px-4 py-2 rounded-lg hover:bg-square-light dark:hover:bg-square-dark flex items-center gap-2">
          <Icon name="tabler:shield-lock" class="size-5" />
          {t('account.security') || "Security"}
        </button>
      </aside>

      <!-- Main content -->
      <div class="md:col-span-2">
        <div class="bg-bg-light dark:bg-bg-dark rounded-xl p-6 shadow-sm border border-section-border-light dark:border-section-border-dark">
          <h2 class="text-xl font-semibold mb-6 text-main-light dark:text-main-dark">
            {t('account.profile_info') || "Profile Information"}
          </h2>

          <form class="space-y-6" method="POST" enctype="multipart/form-data">
            <div class="flex flex-col items-center mb-6">
              {avatarUrl && (
                <div class="mb-4">
                  <img
                    src={avatarUrl}
                    alt="Profile Avatar"
                    class="rounded-full size-24 border-4 border-white dark:border-zinc-700 shadow-sm"
                  />
                </div>
              )}

              <div class="text-center">
                <label for="avatar" class="block text-sm font-medium text-main-light dark:text-main-dark mb-2">
                  {t('account.change_avatar') || "Change Avatar"}
                </label>
                <input
                  type="file"
                  id="avatar"
                  name="avatar"
                  accept="image/png, image/jpeg, image/gif"
                  class={cn(
                    "block w-full text-sm text-secondary-foreground-light dark:text-secondary-foreground-dark",
                    "file:mr-4 file:py-2 file:px-4",
                    "file:rounded-md file:border-0",
                    "file:text-sm file:font-semibold",
                    "file:bg-square-light file:text-main-light",
                    "hover:file:bg-square--hover-light",
                    "dark:file:bg-square-dark dark:file:text-main-dark",
                    "dark:hover:file:bg-square--hover-dark"
                  )}
                />
                <p class="mt-1 text-xs text-secondary-foreground-light dark:text-secondary-foreground-dark">
                  JPG, PNG or GIF. Maximum 2MB.
                </p>
              </div>
            </div>

            <div>
              <label for="email" class="block text-sm font-medium text-main-light dark:text-main-dark">
                {t('account.email') || "Email"}
              </label>
              <input
                type="email"
                id="email"
                name="email"
                value={user?.email}
                disabled
                class="mt-1 block w-full rounded-md py-2 px-3 bg-square-light dark:bg-square-dark border border-section-border-light dark:border-section-border-dark text-main-light dark:text-main-dark disabled:opacity-70"
              />
              <p class="mt-1 text-xs text-secondary-foreground-light dark:text-secondary-foreground-dark">
                {t('account.email_note') || "Email cannot be changed"}
              </p>
            </div>

            <div>
              <label for="name" class="block text-sm font-medium text-main-light dark:text-main-dark">
                {t('account.name') || "Name"}
              </label>
              <input
                type="text"
                id="name"
                name="name"
                value={displayName}
                class="mt-1 block w-full rounded-md py-2 px-3 bg-square-light dark:bg-square-dark border border-section-border-light dark:border-section-border-dark text-main-light dark:text-main-dark focus:ring-2 focus:ring-main-button-bg-light dark:focus:ring-main-button-bg-dark focus:outline-none"
              />
            </div>

            <div class="flex justify-end">
              <button
                type="submit"
                class="bg-main-button-bg-light text-main-button-light hover:bg-main-button-bg-hover-light dark:bg-main-button-bg-dark dark:text-main-button-dark dark:hover:bg-main-button-bg-hover-dark px-4 py-2 rounded-lg font-medium transition-colors"
              >
                {t('account.save') || "Save Changes"}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Auto-close notifications after 5 seconds and add click-to-dismiss functionality
    document.addEventListener('DOMContentLoaded', () => {
      // Get all notifications on the page
      const notifications = document.querySelectorAll('.notification');

      // Process each notification
      notifications.forEach(notification => {
        // Set a timeout to automatically close after 5 seconds
        setTimeout(() => {
          hideNotification(notification as HTMLElement);
        }, 5000);

        // Add click event to close button
        const closeButton = notification.querySelector('.notification-close');
        if (closeButton) {
          closeButton.addEventListener('click', () => {
            hideNotification(notification as HTMLElement);
          });
        }
      });

      // Function to hide notifications with a fade-out effect
      function hideNotification(element: HTMLElement) {
        // Only proceed if the element exists and is in the DOM
        if (element && document.body.contains(element)) {
          // Add opacity-0 class to fade out
          element.classList.add('opacity-0');

          // After the transition completes, remove the element
          setTimeout(() => {
            element.remove();
          }, 300); // Match this to the duration-300 in your transition classes
        }
      }
    });
  </script>
</Layout>
