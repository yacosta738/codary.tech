---
import { ACCESS_TOKEN, REFRESH_TOKEN } from "@consts";
import Layout from "@layouts/BaseLayout.astro";
import { Icon } from "astro-icon/components";

const { cookies, redirect } = Astro;

// Verificar si el usuario está autenticado
const accessToken = cookies.get(ACCESS_TOKEN)?.value;
const refreshToken = cookies.get(REFRESH_TOKEN)?.value;

// Si no hay tokens, redirigir al login
if (!accessToken || !refreshToken) {
	return redirect("/signin");
}

// Función para generar URL de Gravatar
function getGravatarUrl(email: string) {
	// Convertir email a minúsculas
	const normalizedEmail = email.toLowerCase().trim();
	// Crear MD5 hash del email (usando una función simple para esto)
	// En producción, deberías usar una librería de hash MD5 apropiada
	const hash = new TextEncoder()
		.encode(normalizedEmail)
		.reduce((a, b) => a + b.toString(16).padStart(2, "0"), "");

	// Retornar URL de Gravatar
	return `https://www.gravatar.com/avatar/${hash}?d=mp&s=200`;
}

// Obtener información del usuario del endpoint
interface UserData {
	id?: string;
	email?: string;
	avatar_url?: string;
	name?: string;
	full_name?: string;
}

let userData: UserData = {};
let error = null;
let updateResult = null;

// Si se envió el formulario para actualizar perfil
if (Astro.request.method === "POST") {
	try {
		const formData = await Astro.request.formData();

		// Enviar la solicitud a nuestro endpoint de actualización
		const response = await fetch(new URL("/api/user/update", Astro.url), {
			method: "POST",
			body: formData,
			headers: {
				// No incluimos Content-Type para que el navegador establezca el boundary para multipart/form-data
				Cookie: `sb-access-token=${accessToken}; sb-refresh-token=${refreshToken}`,
			},
		});

		const result = await response.json();

		if (response.ok) {
			userData = result.user;
			updateResult = { success: true, message: result.message };
		} else {
			updateResult = { success: false, error: result.error };

			// Si hubo error de autenticación, redirigir al login
			if (result.status === 401) {
				cookies.delete(ACCESS_TOKEN, { path: "/" });
				cookies.delete(REFRESH_TOKEN, { path: "/" });
				return redirect("/signin");
			}
		}
	} catch (e) {
		updateResult = { success: false, error: "Error al procesar la solicitud" };
		console.error(e);
	}
}

// Si no hay datos de usuario (porque no hubo POST o hubo error), obtenerlos
if (!userData.id) {
	try {
		// Obtener los datos del usuario de nuestro endpoint
		const response = await fetch(new URL("/api/user/profile", Astro.url), {
			headers: {
				// Incluir cookies en la solicitud
				Cookie: `sb-access-token=${accessToken}; sb-refresh-token=${refreshToken}`,
			},
		});

		const result = await response.json();

		if (response.ok) {
			userData = result.user;
		} else {
			error = result.error;

			// Si hay un error de autenticación, redirigir al login
			if (result.status === 401) {
				cookies.delete(ACCESS_TOKEN, { path: "/" });
				cookies.delete(REFRESH_TOKEN, { path: "/" });
				return redirect("/signin");
			}
		}
	} catch (e) {
		error = "Error al obtener información del usuario";
		console.error(e);
	}
}

// Determinar qué avatar mostrar
const avatarUrl =
	userData.avatar_url ||
	(userData.email ? getGravatarUrl(userData.email) : null);

// Determinar qué nombre mostrar (priorizar full_name si existe)
const displayName = userData.full_name || userData.name || "";
---

<Layout title="Mi cuenta" description="Administra tu cuenta y configuraciones">
  <div class="container mx-auto px-4 py-8 max-w-4xl">
    <div class="flex items-center justify-between mb-8">
      <h1 class="text-3xl font-bold dark:text-zinc-100">Mi cuenta</h1>
      <form action="/api/auth/signout" method="get">
        <button type="submit" class="flex items-center gap-2 text-red-500 hover:text-red-600 dark:text-red-400 dark:hover:text-red-300">
          <Icon name="tabler:logout" class="size-5" />
          Cerrar sesión
        </button>
      </form>
    </div>

    {error && (
      <div class="notification bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-6 dark:bg-red-900/30 dark:border-red-800 dark:text-red-400 flex justify-between transition-opacity duration-300">
        <p class="flex items-center gap-2">
          <Icon name="tabler:alert-circle" class="size-5" />
          {error}
        </p>
        <button class="notification-close" aria-label="Cerrar">
          <Icon name="tabler:x" class="size-5" />
        </button>
      </div>
    )}

    {updateResult?.success && (
      <div class="notification bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-lg mb-6 dark:bg-green-900/30 dark:border-green-800 dark:text-green-400 flex justify-between transition-opacity duration-300">
        <p class="flex items-center gap-2">
          <Icon name="tabler:square-rounded-check" class="size-5" />
          Perfil actualizado correctamente
        </p>
        <button class="notification-close" aria-label="Cerrar">
          <Icon name="tabler:x" class="size-5" />
        </button>
      </div>
    )}

    {updateResult?.error && (
      <div class="notification bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-6 dark:bg-red-900/30 dark:border-red-800 dark:text-red-400 flex justify-between transition-opacity duration-300">
        <p class="flex items-center gap-2">
          <Icon name="tabler:alert-circle" class="size-5" />
          {updateResult.error}
        </p>
        <button class="notification-close" aria-label="Cerrar">
          <Icon name="tabler:x" class="size-5" />
        </button>
      </div>
    )}

    <div class="grid md:grid-cols-3 gap-8">
      <!-- Menú lateral -->
      <aside class="space-y-2">
        <button class="w-full text-left px-4 py-2 rounded-lg bg-neutral-100 dark:bg-neutral-800 font-medium flex items-center gap-2">
          <Icon name="tabler:user" class="size-5" />
          Perfil
        </button>
        <button class="w-full text-left px-4 py-2 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-800 flex items-center gap-2">
          <Icon name="tabler:settings" class="size-5" />
          Configuraciones
        </button>
        <button class="w-full text-left px-4 py-2 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-800 flex items-center gap-2">
          <Icon name="tabler:shield-lock" class="size-5" />
          Seguridad
        </button>
      </aside>

      <!-- Contenido principal -->
      <div class="md:col-span-2">
        <div class="bg-white dark:bg-zinc-800 rounded-xl p-6 shadow-sm">
          <h2 class="text-xl font-semibold mb-6 dark:text-zinc-100">Información de perfil</h2>

          <form class="space-y-6" method="POST" enctype="multipart/form-data">
            <div class="flex flex-col items-center mb-6">
              {avatarUrl && (
                <div class="mb-4">
                  <img
                    src={avatarUrl}
                    alt="Avatar de perfil"
                    class="rounded-full size-24 border-4 border-white dark:border-zinc-700 shadow-sm"
                  />
                </div>
              )}

              <div class="text-center">
                <label for="avatar" class="block text-sm font-medium dark:text-zinc-300 mb-2">
                  Cambiar avatar
                </label>
                <input
                  type="file"
                  id="avatar"
                  name="avatar"
                  accept="image/png, image/jpeg, image/gif"
                  class="block w-full text-sm text-zinc-500
                    file:mr-4 file:py-2 file:px-4
                    file:rounded-md file:border-0
                    file:text-sm file:font-semibold
                    file:bg-neutral-100 file:text-neutral-700
                    hover:file:bg-neutral-200
                    dark:file:bg-zinc-700 dark:file:text-zinc-200
                    dark:hover:file:bg-zinc-600"
                />
                <p class="mt-1 text-xs text-neutral-500 dark:text-neutral-400">
                  JPG, PNG o GIF. Máximo 2MB.
                </p>
              </div>
            </div>

            <div>
              <label for="email" class="block text-sm font-medium dark:text-zinc-300">
                Correo electrónico
              </label>
              <input
                type="email"
                id="email"
                name="email"
                value={userData.email}
                disabled
                class="mt-1 block w-full rounded-md py-2 px-3 bg-neutral-50 dark:bg-zinc-700 border border-neutral-300 dark:border-zinc-600 dark:text-zinc-300 disabled:opacity-70"
              />
              <p class="mt-1 text-xs text-neutral-500 dark:text-neutral-400">
                El correo electrónico no se puede cambiar
              </p>
            </div>

            <div>
              <label for="name" class="block text-sm font-medium dark:text-zinc-300">
                Nombre
              </label>
              <input
                type="text"
                id="name"
                name="name"
                value={displayName}
                class="mt-1 block w-full rounded-md py-2 px-3 bg-neutral-50 dark:bg-zinc-700 border border-neutral-300 dark:border-zinc-600 dark:text-zinc-300 focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-600 dark:focus:bg-zinc-800 focus:ring-opacity-60"
              />
            </div>

            <div class="flex justify-end">
              <button
                type="submit"
                class="bg-zinc-900 text-white dark:bg-white dark:text-zinc-900 px-4 py-2 rounded-lg font-medium hover:bg-zinc-800 dark:hover:bg-zinc-200 transition-colors"
              >
                Guardar cambios
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Auto-close notifications after 5 seconds and add click-to-dismiss functionality
    document.addEventListener('DOMContentLoaded', () => {
      // Get all notifications on the page
      const notifications = document.querySelectorAll('.notification');

      // Process each notification
      notifications.forEach(notification => {
        // Set a timeout to automatically close after 5 seconds (5000ms)
        setTimeout(() => {
          hideNotification(notification as HTMLElement);
        }, 5000);

        // Add click event to close button
        const closeButton = notification.querySelector('.notification-close');
        if (closeButton) {
          closeButton.addEventListener('click', () => {
            hideNotification(notification as HTMLElement);
          });
        }
      });

      // Function to hide notifications with a fade-out effect
      function hideNotification(element: HTMLElement) {
        // Only proceed if the element exists and is in the DOM
        if (element && document.body.contains(element)) {
          // Add opacity-0 class to fade out
          element.classList.add('opacity-0');

          // After the transition completes, remove the element
          setTimeout(() => {
            element.remove();
          }, 300); // Match this to the duration-300 in your transition classes
        }
      }
    });
  </script>
</Layout>
