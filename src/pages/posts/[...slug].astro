---
import { render } from "astro:content";
import FormattedDate from "@components/FormattedDate.astro";
import OptimizedCover from "@components/OptimizedPicture.astro";
import RelatedPostsCard from "@components/RelatedPostsCard.astro";
import BaseLayout from "@layouts/BaseLayout.astro";
import { getArticles } from "@models/Article";

export async function getStaticPaths() {
	const articles = await getArticles();
	return articles.map((article) => ({
		params: { slug: article.id },
		props: article,
	}));
}

const article = Astro.props;
const { Content } = await render(article.entry);
---

<BaseLayout title={article.title} description={article.description}>
  <main>
    <article class="prose mx-auto dark:prose-invert">
        <div class="prose-h1 text-center">
          <h1>{article.title}</h1>
        </div>
        <div>
          {
            article.cover && (
              <OptimizedCover src={article.cover} alt={article.coverAlt} />
            )
          }
        </div>
        <div>
          <Content />
        </div>
        <div class="prose-a:no-underline">
          {
            article.tags.map((tag: { id: string; title: string }) => (
              <span class="mb-2 mr-2 inline-block rounded-full bg-neutral-200 px-3 py-1 text-sm hover:bg-neutral-500 dark:bg-neutral-600">
                <a href={`/tags/${tag.id}/1/`}>{tag.title}</a>
              </span>
            ))
          }
        </div>
        <div class="flex justify-between">
            <small
            >Publicado el <FormattedDate date={article.pubDate} />, Actualizado el <FormattedDate
            date={article.lastModified ?? article.pubDate}
            /></small
            >
        </div>
    </article>
    <div class="mt-4">
      <RelatedPostsCard
        currentCategory={article.category}
        currentSlug={article.id}
      />
    </div>
  </main>
</BaseLayout>
